name: qqwry
on:
  workflow_dispatch:
  schedule:
    - cron: '55 9,15 * * *'
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
env:
  innoextract_version: 1.9
  arch: amd64
 
permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Caching dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
          pip install bs4
      
      - name: Get download link from WeChat tweet
        run: |
          link=$(python qqwry.py)
          echo "LINK=${link}" >> $GITHUB_ENV

      - name: Cache downloaded file
        uses: actions/cache@v3
        id: cache-file
        with:
          path: Downloads
          key: ${{ runner.os }}-downloaded-file
      
      - name: Use link to download newest Zip
        run: |
          link=${{ env.LINK }}
          mkdir -p Downloads
          cd Downloads
          wget $link

      - name: Cache innoextract
        uses: actions/cache@v3
        id: cache-innoextract
        with:
          path: innoextract
          key: ${{ runner.os }}-innoextract-${{ env.innoextract_version }}
      
      - name: Download innoextract
        if: steps.cache-innoextract.outputs.cache-hit != 'true'
        run: |
          wget https://github.com/dscharrer/innoextract/releases/download/${{ env.innoextract_version }}/innoextract-${{ env.innoextract_version }}-linux.tar.xz
          tar -xvf innoextract-${{ env.innoextract_version }}-linux.tar.xz innoextract-${{ env.innoextract_version }}-linux/bin/${{ env.arch }}/innoextract --strip-components 3

      - name: Get qqwry.dat
        id: dat_date
        shell: pwsh
        run: |
          $zip = (Get-ChildItem Downloads\*.zip)[0].FullName
          $filename = (Get-ChildItem Downloads\*.zip)[0].Name
          $name = $filename.Substring($filename.IndexOf('-') + 1 , $filename.length - $filename.IndexOf('-') - 5)
          echo "dat_date=$name" | Out-File -FilePath $env:GITHUB_ENV
          7z e -y $zip setup.exe
          ./innoextract setup.exe -I qqwry.dat

      - name: Check if tag exists
        run: |
          git fetch --tags
          echo "Value of dat_date: ${{ env.dat_date }}"
          if git rev-parse ${{ env.dat_date }} >/dev/null 2>&1; then
            echo "Tag already exists, skipping create release"
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          fi

      - name: Calculate file hash value
        id: calculate_hash_value
        run: |
          echo "hash=$(sha256sum app/qqwry.dat | awk '{ print $1 }')" >> $GITHUB_ENV
      
      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        if: env.TAG_EXISTS != 'true'
        with:
          commit: ${{ env.GITHUB_SHA }}
          tag: ${{ env.dat_date }}
          token: ${{ secrets.qqwry }}
          artifacts: app/qqwry.dat
          body: |
           #### qqwry.dat

           | Name               | Value                      |
           | :----------------: | :------------------------: |
           | Zip Download link: | ${{ env.LINK }}            |
           | File hash:         | qqwry.dat: ${{ env.hash }} |

           <p align="right"><code>Version: ${{ env.dat_date }} </code></p>

      - name: Check for changes in qqwry.dat
        id: check
        run: |
          if [ ! -f app/qqwry.dat ]; then
            echo "File does not exist"
            echo "RUN_NEXT_STEP=true" >> $GITHUB_ENV
            mv app/qqwry.dat qqwry.dat           
          else
            LAST_COMMIT=$(git log --all --format=format:%H --full-diff app/qqwry.dat)
            CURRENT_COMMIT=$(git rev-parse HEAD)
            if [ "$LAST_COMMIT" != "$CURRENT_COMMIT" ]; then
              echo "File has changed"
              echo "RUN_NEXT_STEP=true" >> $GITHUB_ENV
              mv app/qqwry.dat qqwry.dat
            fi
          fi
      
      - name: Commit qqwry.dat
        if: env.RUN_NEXT_STEP == 'true'        
        env:
         GIT_USERNAME: ${{ secrets.GIT_USERNAME }}
         GIT_EMAIL: ${{ secrets.GIT_EMAIL }}
        run: |
         git config --global user.name $GIT_USERNAME
         git config --global user.email $GIT_EMAIL
         if ! Copy code
git status -s | grep qqwry.dat --quiet --exit-code; then
           git add qqwry.dat
           git commit -m "Update qqwry.dat in  ${{ env.dat_date }}"
           git push
         fi